/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
//#include <xil_printf.h>
#include <xparameters.h>


//In the memory only first 24 bits are used for color, the last

#define WHITE  0x00FFFFFF
#define YELLOW 0x00FFFF00
#define BLUE   0x0000000FF
#define GREEN  0x0000FF00
#define RED    0x00FF0000
#define BLACK  0x00000000
#define LT_GRAY   0x00AAAAAA
#define DK_GRAY   0x00555555
#define XY_TO_I(X, Y) ((Y*1024) + X)
unsigned int *g_vga_base = (unsigned int *)XPAR_AXI_TFT_0_BASEADDR;
static unsigned int *g_vga_draw_buffer;
#define VGA_BUFFER1 XPAR_MIG_7SERIES_0_BASEADDR;
#define BRAMADD 0xC0000000
unsigned int *bramImageaddr= (unsigned int *)BRAMADD;



//The only resolution supported by TFT is 640x480 so the first pixel is 0,0 and the last pixel is (639,479)

int k =0;
int x1;
int y1;


void timer(){
	int t=0;
	for (t=0; t<50000; t++){

	}
}

void vga_draw_pixel(int x, int y, int clr)
{
	unsigned int *a = (unsigned int *)g_vga_draw_buffer;

//	a[XY_TO_I(x,y)] = clr;
  a[XY_TO_I(x,y)] = clr ;
    k=k+1;
	//if(x == 639 && y == 479)
	//	xil_printf("clearing %d %d %x\n", x, y, &a[XY_TO_I(x,y)]);
}

void vga_draw_pixel_one(int x, int y)
{
	unsigned int *a = (unsigned int *)g_vga_draw_buffer;

//	a[XY_TO_I(x,y)] = clr;
  a[XY_TO_I(x,y)] = *(bramImageaddr+k) ;
    k=k+1;
	//if(x == 639 && y == 479)
	//	xil_printf("clearing %d %d %x\n", x, y, &a[XY_TO_I(x,y)]);
}


void vga_clear_screen(int clr)
{
	int j = 0;
	int i = 0;
	for (j = 0; j < 480; j++)
	for(i = 0; i < 640; i++)
	{

		vga_draw_pixel(i, j, clr);		//Write Y //the drawing happens column-wise from left to right
	}
}

void vga_draw_object(int x, int y){
	int j = 0;
		int i = 0;
		k=0;
		for (j = y; j < y+35; j++)
		for(i = x; i < x+50; i++)
		{

			vga_draw_pixel_one(i, j);		//Write Y //the drawing happens column-wise from left to right
		}


}

void remove_trace(int x,int y){

	int j = 0;
		int i = 0;
		for (j = y; j < y+35 ; j++)
		for(i = x; i < x+1; i++)
		{

			vga_draw_pixel(i, j, WHITE);		//Write Y //the drawing happens column-wise from left to right
		}

}

void vga_start()
{
	//Clear buffer before displaying
	g_vga_draw_buffer = (unsigned int *)VGA_BUFFER1;
	vga_clear_screen(WHITE);
	x1=590;
	y1=430;
	//while(1){


	vga_clear_screen(WHITE);

	int xval;
	int yval;
	yval=0;

	while(1){
	for(xval=0; xval<590; xval=xval+2){
	//vga_clear_screen(WHITE);
	vga_draw_object(xval,yval);
	timer();
	remove_trace(xval,yval);
	}

	for(xval=590; xval>0; xval--){
	//vga_clear_screen(WHITE);
	vga_draw_object(xval,yval);
	timer();
	remove_trace(xval+50,yval);
	}

	}
	//x1++
	//	vga_draw_object(0,0);
	//}
	*(g_vga_base) = VGA_BUFFER1;
	*(g_vga_base + 1) = 1;
}



int main()
{

	init_platform();

vga_start();

return 0;

}
